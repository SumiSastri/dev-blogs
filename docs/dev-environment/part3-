

[PluralSight](https://app.pluralsight.com/course-player?courseId=29e8d875-9af9-4018-9362-1b94d3e1e049)


## GUI applications 

**Google Chrome**
- Check your chrome version [https://www.whatismybrowser.com/detect/what-version-of-chrome-do-i-have] At the time of writing the browser is: Chrome 85 on macOS (Catalina) if you have an older version update it [https://www.whatismybrowser.com/guides/how-to-update-your-browser/chrome]. If you do not have Chrome installed
- Go to [https://google.com/chrome](https://google.com/chrome)
- Click on `Download Chrome`
- Go to the Downloads folder and run the `googlechrome.dmg` package
- Drag the icon into the Applications folder
- Add Chrome to your dock and open it
- Select `set Chrome as my default browser`


8. Slack

Slack has a native app available on the App store. If you haven't already, [sign up to Slack](https://www.slack.com/) online, and install the OS app. Once it has downloaded you'll find it your the Applications folder. Drag it into the dock and launch the app.

<br>

9. Insomnia/ Postman

Insmonia/ Postman are apps that will allow us to make requests to web servers, and visualise the responses that they make.

Download Insomnia[[https://insomnia.rest/](https://insomnia.rest/) ]
Download Postman [https://www.postman.com/downloads/]

Copy the chosen app it into your Applications folder and add it to your dock.

<br>


10. Check your shell - a shell is a very basic user interface for accessing an operating system's serviceMacs come shipped with a shell called 'bash' by default. Bash stands for **'Bourne-again shell'**, referring to its objective as a free replacement for the Bourne shell which was developed by [Steven Bourne](https://en.wikipedia.org/wiki/Stephen_R._Bourne). 

We are going to use another shell called `zsh` (zish) because it has some extra features to make our web-development easier. The American English pronunciation of Z is "zee", so Z shell rhymes with C shell, which sounds like seashell. `zsh` was also the login of the original developer Paul Falstad's Yale professor Zhong Shao.

#### Install zsh (zish/ seashell)

1. Type `brew install zsh`.
2. Type `zsh`. You will see a list of options. Type `0` to create a `~/.zshrc` file.
3. You should see a `%` instead of a `$` at the terminal prompt. Type `exit` and you should see the `$` again.
4. Type `which zsh` to determine where your new shell has installed. It should say `/usr/local/bin/zsh`
5. Type `sudo su` and enter your password. You should see a `#` instead of the `$` at the terminal prompt
6. Type `echo '/usr/local/bin/zsh' >> /etc/shells` to add `zsh` into the list of allowed shells, then type `exit`. You should see the `$` sign at the prompt again.
6. Type `chsh -s /usr/local/bin/zsh`, and enter your password (laptop) - you will get the shell you have changed paths for ```chsh: /usr/local/bin/zsh: non-standard shell``` change if you get this error message ``` chsh -s /bin/zsh```
7. Close and reopen your terminal application. This will enable `zsh` by default. You should see the `%` symbol at the prompt.
7. Type `echo $SHELL`. This should return `/usr/local/bin/zsh`.

<br>

## Oh-My-Zsh (optional)

Oh My Zsh is an open source, community-driven framework for managing your zsh configuration. Here is the link to the [Github](https://github.com/robbyrussell/oh-my-zsh).

The `PATH` environment variable is a colon-delimited list of directories that your shell searches through when you enter a command.

1. Type `sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"`.
2. Open the `.zshrc` file by typing `code. ~/.zshrc`
3. Find the line `# export PATH=$HOME/bin:/usr/local/bin:$PATH` It's right at the top of the file.
4. Remove the `#` and the space at the start. This sets the right path
5. Save the file and quit Atom.
6. Close your terminal and open a new one.

<br>

#### Shell switching

You can check which shell you are using by type `echo $SHELL` in your terminal.

By default, macOS Catalina uses zsh as the default login shell (see this announcement[https://support.apple.com/en-ca/HT208050]). 

You can, however, change the default login shell through `chsh -s /bin/bash` or any other shells listed by running  `< /etc/shells` this lists the shell paths: /etc/shells, such as /bin/zsh, /bin/bash, /bin/csh, /bin/dash, /bin/ksh, /bin/sh, or /bin/tcsh..

To test script compatibility with Bourne-compatible shells in macOS Catalina, you can change /var/select/sh to /bin/bash, /bin/dash, or /bin/zsh. If you change /var/select/sh to a shell other than bash, be aware that scripts that make use of bashisms may not work properly.

zsh can be made to emulate sh by executing the command ```zsh --emulate sh```.

You might want to switch from $bash to %zsh and vice-versa. To use %zsh - if you wish to switch to any of the other paths listed replace with the file path.

``` chsh -s /bin/zsh```
``` chsh -s /bin/sh```
``` chsh -s /bin/bash```


### Macs


By default the command line on a Mac is fairly unhelpful and not nearly as pleasent to work on as it can be with a few tweaks.

Most customisation happens by running commands inside a file called `.bash_profile` which is parsed every time you open a new terminal window.

This file is found in your home directory, so to edit it, run `nano ~/.bash_profile`

After making any changes you can restart your session by typing:

```bash
$ source ~/.bash_profile
```

## Bash Completion

Bash completion is a bash function that allows you to auto complete commands or arguments by typing partially commands or arguments, then pressing the [Tab] key.

### Installation

```bash
$ brew install bash-completion
```

You will need to add the following to your `~/.bash_profile` then restart your session - from command line or

open .bash_profile (copy and paste the code below)

```
[ -f /usr/local/etc/bash_completion ] && . /usr/local/etc/bash_completion
```

### Usage

Once you've done this, you can use bash completion by pressing the tab key twice after a command. For example:

```bash
$ git [tab] [tab]
mergetool      range-diff     replace        send-email     stash          worktree
apply          bundle         clean          diff           gc             init           mv             rebase         request-pull   shortlog       status
archive        checkout
```

## Keyboard Shortcuts

We use some commands so frequently that it's often helpful to setup an alias for them. You can do this with this command: `alias shortcut=long command`

Some potentially useful aliases:

```bash
# List directory contents
alias ll="ls -lh"

# Current git status
alias gs="git status"

# Undo all local changes - use with caution!
alias grh="git reset --hard"

# Change directory to the cloud project
alias cloud="cd $HOME/projects/in2plane-cloud"

# Change directory to the API V2 project
alias api="cd $HOME/projects/in2plane-api"
```

## Pretty git prompt

You can configure the terminal to include a colourful prompt showing the current git branch next to the cursor.

Add the following to your `~/.bash_profile` and restart the session:

```
export CLICOLOR=1
source /usr/local/git/contrib/completion/git-completion.bash
GIT_PS1_SHOWDIRTYSTATE=true
reset=$(tput sgr0)
export PS1='\w \[\033[01;32m\]$(__git_ps1)\[$reset\] \$ '
```

## Basic tools

During the development process you need to check you Mac has the

- A code editor or IDE (integrated development environment) - Atom, Visual Studio Code, Sublime Text
- Version control - GitHub or Gitlab, BitBucket
- For JavaScript developers - Node and Node Version manager (nvm)
- Package managers - Node package manager (npm) or Yarn




Concatinating paths
[https://www.cyberciti.biz/faq/linux-unix-appleosx-bsd-cat-command-examples/]

**Google Chrome Extensions**
1. React dev tools Docs[https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en]
2. Redux dev tools [https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd]
3. Node Inspector Monitor - Docs [https://chrome.google.com/webstore/detail/nodejs-v8-inspector-manag/gnhhdgbaldcilmgcpfddgdbkhjohddkj?hl=en]

__React / redux in the browser__

While most new react features are being developed, they are completely hidden from customers, but we still have a way to interact with the new react code as it is loaded like other JS bundles.

__React Developer Tools__

To be able to view the react component tree in the chrome console, please install [React Developer Tools](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi)
You will then have a "React" tab in your chrome developer tools.

If you click on this, and open the console (Esc) at the same time, you'll have access to the `store provider` in there, through a variable named `$r`.

Then, you can get the store state with `$r.store.getState()`, and dispatch actions with `r.store.dispatch(<< ACTION OBJECT >>);`

Right now, as we develop a component, you can show it once the page has loaded with:
`r.store.dispatch({ type: 'APP_SHOW_SIDE_SLIDER'});`

__Redux DevTools__

While the React developer tools give you access to the store, it's cumbersome to inspect the current store state and dispatch actions. There is an easier way, with another extension: [Redux DevTools](https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd)

The front-end code is already configured to use it if it's installed in your browser, so all you have to do is install the browser extension.

Again, you'll have a new tab named "Redux" in your Chrome Developer Tools.
From there, you can inspect the current state ('state' tab, top right), see all the actions that have been dispatched (list on the left when using the 'inspector'), see the content of a selected action in this list (select action in list, then select the 'Action' tab, top right), or dispatch a new action from the textArea at the bottom.

Like with the React Developer Tools, you need to use `APP_SHOW_SIDE_SLIDER` as an action type, so you would enter the following in the textArea and hit 'dispatch' at the bottom right:

```
{
    TYPE: 'APP_SHOW_SIDE_SLIDER'
}
```


<br>
